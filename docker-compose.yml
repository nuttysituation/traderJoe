version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stock_tracker_db
    environment:
      POSTGRES_DB: stock_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/migrations:/docker-entrypoint-initdb.d
    networks:
      - stock_tracker_network
    security_opt:
      - no-new-privileges:true
    read_only: false  # PostgreSQL needs write access to data directory
    user: "999:999"  # Use non-root user

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stock_tracker_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stock_tracker_network
    security_opt:
      - no-new-privileges:true
    read_only: false  # Redis needs write access to data directory
    user: "999:999"  # Use non-root user

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: stock_tracker_server
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=stock_tracker
      - REDIS_URL=redis://redis:6379
      - HTTPS_PORT=8766
    ports:
      - "8765:8765"
      - "8766:8766"
    volumes:
      - ./server:/app
      - ./ssl:/app/ssl
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - stock_tracker_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: false  # Development mode needs write access
    user: "node"  # Use node user from Dockerfile

  # AI Analysis Service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: stock_tracker_ai
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379
    ports:
      - "8000:8000"
    depends_on:
      - redis
    volumes:
      - ./ai-service:/app
    networks:
      - stock_tracker_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: false  # Development mode needs write access
    user: "python"  # Use python user from Dockerfile

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: stock_tracker_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - server
    networks:
      - stock_tracker_network
    restart: unless-stopped
    profiles:
      - production
    security_opt:
      - no-new-privileges:true
    read_only: true  # Nginx can run read-only
    user: "nginx"  # Use nginx user

volumes:
  postgres_data:
  redis_data:

networks:
  stock_tracker_network:
    driver: bridge 